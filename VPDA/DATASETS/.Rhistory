annotate( geom="rect", xmin=x_l_lim, xmax= x_u_lim, ymin = l_min_temp, ymax = temp_l, alpha=0.2, fill="blue")+
annotate( geom="rect", xmin=x_l_lim, xmax= x_u_lim, ymin = temp_l, ymax = temp_m, fill="green", alpha=0.2)+
annotate( geom="rect", xmin=x_l_lim, xmax= x_u_lim, ymin = temp_m, ymax = temp_h , fill="orange", alpha=0.25)+
annotate( geom="rect", xmin=x_l_lim, xmax= x_u_lim, ymin = temp_h, ymax = l_max_temp , fill="red", alpha=0.25)+
geom_crossbar( aes(y=tavg, ymin=tmin, ymax=tmax, color = stage, fill = stage), width = 0.6, alpha = 0.75 ) +
scale_x_continuous( expand = c(0, 0),   breaks = my_breaks_L) +
scale_colour_distiller( aesthetics = "fill", palette="Set1" , type="qual", direction = 1) +
scale_colour_distiller( aesthetics = "colour", palette="Set1" , type="qual", direction = 1) +
# scale_colour_viridis_c(option = the_year_palette) +
# scale_fill_viridis_c(option = the_year_palette) +
ylab("temp") + expand_limits(x= c(x_l_lim, x_u_lim), y = c(0,temp_h) ) + xlab(NULL) +
guides(fill=FALSE, color = FALSE)	+
theme_weather_plots() +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
max_extreme <- max(w.extremes$val)
select_extremes <- w.extremes[w.extremes$year == plot_year_highlight,]
if(gdd_align_plot == TRUE){
l_var_x <- var_x_global
r_set <- ds.year %>% select(l_var_x,new_axis)
select_extremes <- select_extremes %>% left_join( r_set, by=l_var_x)
print(select_extremes)
}
select_extremes$variable <- ordered(select_extremes$variable, levels = c("nheavy_rain", "nfreezing",  "nhot_nights" , "nsummer_days" ,"nhot_days"  ) )
p_heat <- 	ggplot ( data = select_extremes , aes_string(x=var_x)  )
p_heat <- p_heat + geom_tile( aes( y=variable , fill=val), colour = "grey50" ) +
geom_text( data = select_extremes[select_extremes$val >0,], aes( y=variable , label=val), size = 2.5, color="grey31") +
ylab(NULL) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",  midpoint = 0, limit = c(-1, max_extreme) )+
expand_limits(x= c(x_l_lim, x_u_lim)  ) + guides(fill=FALSE )	+
scale_x_continuous( expand = c(0, 0),   breaks = my_breaks_L) +
scale_y_discrete(labels=c("nsummer_days" = "summer days", "nhot_days" = "very hot days", "nhot_nights" = "hot nights", "nfreezing" = "frost", "nheavy_rain" = "heavy rain" )) +
theme_weather_plots()
##########
p <- ggarrange(p_gdd,p_prec,p_temp, p_heat, align="v", ncol=1, heights=c(2,0.5,0.5, 0.5))
# p <- p_gdd
print( "OUT prepare GDD plot")
return( p )
}
######################################################################
observeEvent( input$hist_var_1, {
print_hist()
})
observeEvent( input$hist_var_2, {
print_hist()
})
observeEvent( input$hist_var_2_omit, {
print_hist()
})
observeEvent( input$hist_var_3, {
print_hist()
})
observeEvent( input$hist_var_3_omit, {
print_hist()
})
observeEvent( input$input$hist_var_1_col, {
print_hist()
})
observeEvent( input$input$hist_var_2_col, {
print_hist()
})
observeEvent( input$input$hist_var_3_col, {
print_hist()
})
###############################################
print_hist <- function(){
if(  !is.null(input$wds) & !is.null(input$rds) ){
print("IN Histogram")
## two vars for left plot
hist_var_1 <- input$hist_var_1
hist_var_2 <- input$hist_var_2
hist_var_3 <- input$hist_var_3
w.ds.L <- w.ds[! w.ds$year %in% years_to_ignore, ]
my_hist <- ggplot( data=w.ds.L, aes_string(x=hist_var_1)) +
geom_histogram( fill = input$hist_var_1_col, color="black", size=0.1, alpha = 0.4)
if ( input$hist_var_2_omit == FALSE){
my_hist <- my_hist + geom_histogram( aes_string(x=hist_var_2), color="black", size=0.1,fill = input$hist_var_2_col, alpha = 0.4)
}
if ( input$hist_var_3_omit == FALSE){
my_hist <- my_hist + geom_histogram( aes_string(x=hist_var_3), color="black", size=0.1, fill = input$hist_var_3_col, alpha = 0.4)
}
my_hist <- my_hist  + theme_weather_plots()
output$hist <- renderPlot( print( my_hist ))
print("OUT Histogram")
} ### end ... if(  !is.null(input$wds) & !is.null(input$rds) ){
}
################################
## Read Weather data file
data_file_w <- reactive({
inFileW <- input$wds # apontador para o ficheiro com as temperaturas
if (is.null(inFileW) ){ ## Checks if the filename is valid
return(NULL)
}
print(" LIDO wds (data_file_w) ")
wds_file <- file_path_sans_ext( basename( inFileW$name) )
print( wds_file )
updateTextInput(session, "file_name_prefix", value = wds_file)
stages_done <<- FALSE
## this next command has to be the last one in the function
read.csv(inFileW$datapath, sep=";", header = TRUE, stringsAsFactors = FALSE)
})
#########
################################
# Read rankings file
data_file_r <- reactive({
inFileR <- input$rds # apontador para o ficheiro com as temperaturas
if (is.null(inFileR) ){ ## Checks if the filename is valid
return(NULL)
}
print( "LIDO rds")
read.csv(inFileR$datapath, sep=";", header = TRUE, stringsAsFactors = FALSE)
})
########
######################################################################
######################################################################
## saves sbs plot
observeEvent(input$save_sbs_plot,{
print("IN - observeEvent(input$save_plot,{")
withProgress(message = "Saving the file", detail="", value=0.9,{
save_plot( sbs_plot, "sbs_plot")
}) # end ... withProgress
print("OUT - observeEvent(input$save_plot,{")
})
######################################################################
######################################################################
## saves ref plot
observeEvent(input$save_ref_plot,{
print("IN - observeEvent(input$save_plot,{")
withProgress(message = "Saving the file", detail="", value=0.9,{
the_plot <- ggarrange(p_ref1,p_ref2, align="v", ncol=1)
save_plot( the_plot, "ref_plot")
}) # end ... withProgress
print("OUT - observeEvent(input$save_plot,{")
})
######################################################################
######################################################################
## saves the 4-plots plot
observeEvent(input$save_4_plots,{
print("IN - observeEvent(input$save_plot,{")
withProgress(message = "Saving the file", detail="", value=0.9,{
p1<- ggarrange(plot1,plot3, align="v", ncol=1)
p2<- ggarrange(plot2,plot4, align="v", ncol=1)
the_plot <- ggarrange( p1,p2, align="h", ncol=2)
save_plot( the_plot, "4_plots")
}) # end ... withProgress
print("OUT - observeEvent(input$save_plot,{")
})
######################################################################
######################################################################
## saves the BAR plot
observeEvent(input$save_bar_plot,{
print("IN - observeEvent(input$save_bar_plot,{")
withProgress(message = "Saving the file", detail="", value=0.9,{
save_plot( bar_plot, "bar_plot")
}) # end ... withProgress
print("OUT - observeEvent(input$save_bar_plot,{")
})
######################################################################
######################################################################
## saves the GDD plot
observeEvent(input$save_gdd_plot,{
print("IN - observeEvent(input$save_gdd_plot,{")
withProgress(message = "Saving the file", detail="", value=0.9,{
save_plot( gdd_plot, "gdd_plot")
}) # end ... withProgress
print("OUT - observeEvent(input$save_gdd_plot,{")
})
###########################################################
### Function to save a plot
save_plot <- function(the_plot, plot_type ){
the_plot_2_print <- the_plot
plot_units <- "mm"
if( input$page_size == "A4" & input$page_orientation == "Portrait"){
plot_height <- 297
plot_width  <- 210
}else if( input$page_size == "A4" & input$page_orientation == "Landscape"){
plot_height <- 210
plot_width  <- 297
}else if( input$page_size == "A3" & input$page_orientation == "Portrait"){
plot_height <- 420
plot_width  <- 297
}else if( input$page_size == "A3" & input$page_orientation == "Landscape"){
plot_height <- 291
plot_width  <- 420
}
data_hoje <- format(Sys.Date(), "%Y%m%d")
file_name <- paste( input$file_name_prefix ,"_",plot_type,"_",data_hoje, sep="")
if(input$file_type == "jpg"){
nome_ficheiro <- paste(file_name,".jpg", sep="")
ggsave(nome_ficheiro, the_plot_2_print, width = plot_width , height = plot_height, units=plot_units, dpi=as.numeric(input$file_resolution)  )
}else if (input$file_type == "pdf") {
nome_ficheiro <- paste(nome_ficheiro,".pdf", sep="")
ggsave(file_name, the_plot_2_print, device="pdf", width = plot_width , height = plot_height, units=plot_units)
}
}
###########################
################################################################################
observeEvent( input$var_x,{
print("in observe input$var_x")
var_x_global <<- input$var_x
if( input$var_x == "month"){
updateSliderInput(session, "harvest_length", label = "Harvest (months)", value= 1, min =0, max=3)
}else{
updateSliderInput(session, "harvest_length", label = "Harvest (weeks)", value= 4, min =0, max=12)
}
print("out observe input$var_x")
})
############################################
############################################
##############################################
### GDD parameters for the three regions
observeEvent (input$region,{
if(input$region == "douro" ){
updateNumericInput(session, "gdd_parameter", value= 10)
updateNumericInput(session, "hi_parameter", value= 1.02)
updateNumericInput(session, "budburst_gdd", value= 50)
updateNumericInput(session, "flowering_gdd", value= 355)
updateNumericInput(session, "veraison_gdd", value= 1030)
updateNumericInput(session, "maturity_gdd", value= 1516)
}else 	if(input$region == "napa" ){
updateNumericInput(session, "gdd_parameter", value= 10)
updateNumericInput(session, "hi_parameter", value= 1.02)
updateNumericInput(session, "budburst_gdd", value= 50)
updateNumericInput(session, "flowering_gdd", value= 355)
updateNumericInput(session, "veraison_gdd", value= 1030)
updateNumericInput(session, "maturity_gdd", value= 1516)
}else 	if(input$region == "bordeaux" ){
updateNumericInput(session, "gdd_parameter", value= 10)
updateNumericInput(session, "hi_parameter", value= 1.05)
updateNumericInput(session, "budburst_gdd", value= 50)
updateNumericInput(session, "flowering_gdd", value= 355)
updateNumericInput(session, "veraison_gdd", value= 1030)
updateNumericInput(session, "maturity_gdd", value= 1516)
}
})
## Method to clean all the variables
observeEvent(input$reset_button, {
#js$reset()
## reset page
session$reload()
})
##################################################################################
##################################################################################
### theme
theme_weather_plots <- function () {
theme_minimal(base_size=12)%+replace%
theme(
axis.title = element_text( family= "sans", colour = "royalblue4", size = rel (1.2) ) ,
axis.text = element_text(family= "sans", colour = "royalblue4", size = rel (1)),
strip.text = element_text(size = rel(1.1), colour = "royalblue4", angle = 0, hjust=0.5),
plot.title = element_text(size = rel(1), colour = "royalblue4", angle = 0, hjust=0.5),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour="grey72", size = 0.1),
panel.background = element_rect(fill="white", colour="royalblue4", size=1.1 ),
plot.margin = margin(0.5, 1, 0.5, 1, "cm")
# plot.background = element_rect(fill = "darkgrey")
)
}
}
shinyApp(ui = ui, server = server)
library(tidyverse)
?month
a <- today()
a
a + months(1)
a + weeks(2)
months(1)
a + years(2)
a + quarter(1)
a
a + quarter(3)
a + quarter(4)
my_date <- ymd("2023-09-04")
# Add one quarter
new_date <- my_date + quarters(1)
?quarters
a + lubridate::quarter(4)
a + lubridate::quarters(4)
a + quarters(4)
a
today()
today() + quarters(2)
num_days <- function ( my_date ) {
num_days <- Sys.Date() - as.Date( my_date )
return ( num_days )
}
num_days ( "1967-07-08")
install.packages(c("askpass", "classInt", "deSolve", "directlabels", "donut", "dplyr", "yulab.utils"))
library(installr)
updateR()
install.packages(c("credentials", "dplyr", "geojsonio", "ggcorrplot", "Hmisc", "insight", "knitr", "lpSolve", "minqa", "packcircles", "performance", "RcppArmadillo", "stars", "statsExpressions", "terra", "tmap"))
a <- c(13, 15, 16, 16, 19, 20, 21, 22, 22, 25, 30, 33, 35, 35, 36, 40, 45)
library(infotheo)
x1 <- discretize(a, disc="equalwidth", nbins = 4)
x 2<- discretize(a, disc="equalfreq", nbins = 4)
a <- c(13, 15, 16, 16, 19, 20, 21, 22, 22, 25, 30, 33, 35, 35, 36, 40, 45)
library(infotheo)
x1 <- discretize(a, disc="equalwidth", nbins = 4)
x2<- discretize(a, disc="equalfreq", nbins = 4)
cbind( a , x1 )
library(installr)
updateR()
install.packages(c("dplyr", "graphlayouts", "rio", "yulab.utils"))
install.packages("dplyr")
install.packages(c("datamods", "dbplyr", "gert", "libcoin", "lubridate", "polyclip", "withr"))
library(ggplot2)
(p1 <- ggplot(mtcars) +
geom_point(aes(x = mpg, y = wt, color = as.factor(cyl))) +
labs(
title = "Miles per gallon vs. weight",
subtitle = "Data from mtcars",
caption = "Source: mtcars",
color = NULL,
x = "Miles per gallon",
y = "Weight"
) +
theme_bw(base_size = 16) +
theme(
legend.position = "top",
legend.justification = "left",
legend.margin = margin(0, 0, 0, 0, "pt"),
legend.background = element_rect(color = "red"),
legend.key = element_rect(color = "blue"),
))
p1 + labs(color = "Cylinders")
p1 + guides(color = guide_legend(title.position = "top", title = NULL))
library(installr)
updateR()
library( ggplot2 )
# Add aesthetics to the border for geom_label
data.frame(x = 1:10, y = 1:10) |>
ggplot() +
geom_label(aes(
label=month.abb[x],
x=x,
y=y,
color = factor(x%%3),
linewidth = x%%2,
linetype = factor(x%%3)),
fill = NA) +
scale_linewidth(range=c(0.5, 1.5)) +
scale_linetype_manual(values=c("solid", "blank", "dotted"))
# Add aesthetics to the border for geom_label
data.frame(x = 1:10, y = 1:10) |>
ggplot() +
geom_label(aes(
label=month.abb[x],
x=x,
y=y,
color = factor(x%%3),
linewidth = x%%2,
linetype = factor(x%%3)),
fill = NA) +
scale_linewidth(range=c(0.5, 1.5)) +
scale_linetype_manual(values=c("solid", "blank", "dotted"))
# Add aesthetics to the border for geom_label
data.frame(x = 1:10, y = 1:10) |>
ggplot() +
geom_label(aes(
label=month.abb[x],
x=x,
y=y,
color = factor(x%%3),
linewidth = x%%2,
linetype = factor(x%%3)),
fill = NA , border_color = "black" ) +
scale_linewidth(range=c(0.5, 1.5)) +
scale_linetype_manual(values=c("solid", "blank", "dotted"))
# Add aesthetics to the border for geom_label
data.frame(x = 1:10, y = 1:10) |>
ggplot() +
geom_label(aes(
label=month.abb[x],
x=x,
y=y,
color = factor(x%%3),
linewidth = x%%2,
linetype = factor(x%%3)),
fill = NA , border_colour = "black" ) +
scale_linewidth(range=c(0.5, 1.5)) +
scale_linetype_manual(values=c("solid", "blank", "dotted"))
install.packages(c("aplot", "curl", "DT", "markdown", "plyr", "sp", "tinytex", "TunePareto", "vroom"))
library(installr)
updateR()
q()
library(DMwR2)
ds <-  algae  # data set contains observations on 11 variables on the concentration levels of 7 harmful algae
# choose a variable to analyze
library( GGally )
ggpairs( data = ds , columns = c( 4: ncol(ds)  )  )
hist( ds$PO4 )
hist ( ds$PO4 , plot = FALSE )
boxplot(algae$a5, plot=FALSE)$out
boxplot(algae$a5)
setwd("C:/my_files/01_Working_dir/00_aulas/01_VPDA/classes/datasets")
library(easypackages) ## loads a function to call multiple packages at once
libraries( "readxl" , "dplyr" , "forcats")
ds <- read_xlsx( "hepatitis.xlsx" , col_types="text" )
## numbers as numbers and strings as factors
ds <- ds     %>%     mutate_all ( ~( na_if(. , "?")  )  )  %>%         ## replace ? by NA
mutate_at ( c( 'class' , 'sex' ) ,  ~as_factor( . )  )        %>%   ## were numbers
mutate_at ( c( 'age', 'bilirubin' , 'alk_phosphate' , 'sgot' , 'albumin' , 'protime'), ~as.numeric(.) ) %>%
mutate_if ( is.character , ~(as_factor(.) ) )      ## turn strings into factors
summary ( ds )
ds
summary( ds)
library( finalfit )   	 ## a package with useful functions to deal with missing data
ds %>% ff_glimpse()
library( finalfit )   	 ## a package with useful functions to deal with missing data
ds %>% ff_glimpse()
library( finalfit )   	 ## a package with useful functions to deal with missing data
ds %>% ff_glimpse()
ds %>% missing_plot()
ds %>% missing_plot()
ds %>% missing_plot()
ds %>% missing_plot()
ds %>% missing_plot()
ds %>% missing_pattern()
explanatory  <-   names(ds)[ -1 ]
dependent   <-	'class'
# a summary of dependent variable against each explanatory variable
# includes a chi-square test
ds %>% summary_factorlist( dependent, explanatory , na_include = TRUE , p = TRUE)
explanatory  <-   names(ds)[ -1 ]
dependent   <-	'class'
# a summary of dependent variable against each explanatory variable
# includes a chi-square test
ds %>% summary_factorlist( dependent, explanatory , na_include = TRUE , p = TRUE)
ds %>% missing_pairs( dependent , explanatory , position = 'fill' )
explanatory  <-  c( 'sex' , 'liver_big', 'varices' , 'age' ,'protime')
dependent <-  'class'
ds %>% missing_pairs( dependent , explanatory)
library('readxl')
cars <- read_xlsx( 'car_sales_short.xlsx' , 1 )
summary(cars)				# check the data
table( is.na(cars) )			# count total number of missing values
rowSums ( is.na( cars ) )			# gives number of MV per row
colSums   ( is.na( cars ) )			# gives number of MV per column
names ( cars )[4:6] <- c( "famsize", "cars", "vlp" )
library(VIM)				 # Visualizing missing data
aggr(cars, numbers = TRUE)
library(dplyr)
library(mutate)
# Create a sample data frame
df <- data.frame(x = c(1, 2, 3, 4, 5))
# Using mutate_it with ~ and . to create a new column
df <- df %>%
mutate_it(new_col = ~ .x * 2)
# Create a sample data frame
df <- data.frame(x = c(1, 2, 3, 4, 5))
# Using mutate_it with ~ and . to create a new column
df <- df %>%
mutate_ia(new_col = ~ .x * 2)
# Create a sample data frame
df <- data.frame(x = c(1, 2, 3, 4, 5))
# Using mutate_it with ~ and . to create a new column
df <- df %>%
mutate_at(new_col = ~ .x * 2)
# Create a sample data frame
df <- data.frame(x = c(1, 2, 3, 4, 5))
# Using mutate_it with ~ and . to create a new column
df <- df %>%     mutate_at(new_col = ~ .x * 2)
df
# Create a sample data frame
df <- data.frame(x = c(1, 2, 3, 4, 5))
# Using mutate_it with ~ and . to create a new column
df <- df %>%     mutate_at( . , new_col = ~ .x * 2)
df
# Create a sample data frame
df <- data.frame(x = c(1, 2, 3, 4, 5))
# Using mutate_it with ~ and . to create a new column
df <- df %>%     mutate(  new_col = ~ .x * 2)
# Create a sample data frame
df <- data.frame(x = c(1, 2, 3, 4, 5))
# Using mutate_it with ~ and . to create a new column
df <- df %>%     mutate(  new_col = ~ (. , x * 2) )
# Create a sample data frame
df <- data.frame(x = c(1, 2, 3, 4, 5))
# Using mutate_it with ~ and . to create a new column
df <- df %>%     mutate( 1,  new_col = ~ (. , x * 2) )
# Create a sample data frame
df <- data.frame(x = c(1, 2, 3, 4, 5))
# Using mutate_it with ~ and . to create a new column
df <- df %>%     mutate_at( 1,  new_col = ~ (. , x * 2) )
# Create a sample data frame
df <- data.frame(x = c(1, 2, 3, 4, 5))
# Using mutate_it with ~ and . to create a new column
df <- df %>%     mutate_at( 1,  new_col = ~ (. x * 2) )
# Create a sample data frame
df <- data.frame(x = c(1, 2, 3, 4, 5))
# Using mutate_it with ~ and . to create a new column
df <- df %>%     mutate_at( 1,  new_col = ~ . x * 2)
ds
df
df %>% mutater_at ( c("x") , ~( .*2 ))
df %>% mutate_at ( c("x") , ~( .*2 ))
df %>% mutate_at ( c("x") , ~( .x2 ))
df %>% mutate_at ( c("x") , ~( .x ))
df %>% mutate_at ( c("x") , ~( .y ))
ds
ds %>% mutate_at ( . , ~( .*2 ))
ds %>% mutate_at ( 4:6 , ~( .*2 ))
alga
mammals
iris
head(iris)
iris %>% mutate_at ( 2:3 , ~( .*2 ))
iris %>% mutate_at ( 2:3 , ~( .x ))
iris %>% mutate_at ( 2:3 , ~( .y ))
x
.x
?.X
?.x
